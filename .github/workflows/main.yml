name: Build project

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  check_if_merged:
    name: Check Pull Request Merge
    runs-on: ubuntu-latest
    steps:
      - name: Check Merge
        id: check_merge
        run: |
          if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
            echo "Pull request was merged. Building project and creating release."
          else
            echo "Pull request was closed without merging. Exiting."
            exit 1
          fi

  build_project: #This job builds the zipped exe of the game
    name: Build Executable
    needs: [check_if_merged]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows # Build a Windows standalone executable.
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache Files
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - name: Build Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/${{ matrix.targetPlatform }}

  echo_data:
    name: Echo PR Data
    needs: [build_project]
    runs-on: ubuntu-latest
    steps:
    - name: echo PR title and body
      env:
        TITLE: ${{ github.event.pull_request.title }}
        BODY: ${{ github.event.pull_request.body }}
      run: echo The PR title is $TITLE and the body is $BODY
  
  create_release: #This job will create a new release using the pull request title and body
    name: Create Release
    needs: [build_project]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Bump version and push tag #create a new tag from the PR title
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ github.event.pull_request.title }}
          tag_prefix: NULL

      - name: Create a GitHub release #create new release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Duck Game Alpha ${{ github.event.pull_request.title }}
          body: ${{ github.event.pull_request.body }}

      - name: Create Build Folder #create a folder to store the build artifact 
        id: create_folder
        run: |
          mkdir -m770 gameBuild
          ls

      - name: Download Artifact
        uses: actions/download-artifact@v3
        id: download
        with:
          name: build #the name is required to specify which artifact is needed
          path: ./gameBuild

      - name: ZIP Build
        id: zip-release
        uses: thedoctor0/zip-release@master
        with: 
          type: zip
          filename: DuckGameBuild.zip
          path: ./gameBuild

      - name: move file
        run: |
          mkdir -p release
          mv /home/runner/work/Duck/Duck/DuckGameBuild.zip release/DuckGameBuild.zip

      - name: Upload Build Artifact
        uses: sekwah41/upload-release-assets@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/Duck/Duck-me/release/DuckGameBuild.zip
          asset_name: DuckGame-${{ github.event.pull_request.title }}.zip
          asset_content_type: application/zip
